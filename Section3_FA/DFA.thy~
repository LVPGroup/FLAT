text\<open>
Formal Languages and Automata Theory (FLAT)
according to the book with same name (2nd version) by Zongli Jiang
created by Yongwang Zhao (zhaoyw@buaa.edu.cn)
School of Computer Science and Engineering, Beihang University, Beijing, China
\<close>

section\<open>3. Finite Automaton\<close>

subsection\<open>3.2: finite automaton\<close>

theory DFA
imports AutoProj
begin

text\<open>
M = <Q,\<Sigma>,\<delta>,q0,F>
Q: states, represented as 's
\<Sigma>: input alphabet, represented as 'a
\<delta>: transition function
q0: initial state
F: final states
da defined as below is a triple <q0,\<delta>,F>
\<close>
type_synonym ('a,'s)dfa = "'s \<times> ('a \<Rightarrow> 's \<Rightarrow> 's) \<times> ('s set)"

abbreviation "q0 da \<equiv> fst da"
abbreviation "\<delta> da \<equiv> fst (snd da)"
abbreviation "F da \<equiv> snd (snd da)"

definition
 foldl2 :: "('a \<Rightarrow> 'b \<Rightarrow> 'b) \<Rightarrow> 'a list \<Rightarrow> 'b \<Rightarrow> 'b" where
"foldl2 f xs a = foldl (\<lambda>a b. f b a) a xs"

definition
 delta :: "('a,'s)da \<Rightarrow> 'a list \<Rightarrow> 's \<Rightarrow> 's" where
"delta A = foldl2 (next A)"

definition
 accepts :: "('a,'s)da \<Rightarrow> 'a list \<Rightarrow> bool" where
"accepts A = (\<lambda>w. fin A (delta A w (start A)))"

lemma [simp]: "foldl2 f [] a = a \<and> foldl2 f (x#xs) a = foldl2 f xs (f x a)"
by(simp add:foldl2_def)

lemma delta_Nil[simp]: "delta A [] s = s"
by(simp add:delta_def)

lemma delta_Cons[simp]: "delta A (a#w) s = delta A w (next A a s)"
by(simp add:delta_def)

lemma delta_append[simp]:
 "\<And>q ys. delta A (xs@ys) q = delta A ys (delta A xs q)"
by(induct xs) simp_all

end
